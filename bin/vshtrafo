#!/usr/bin/env bash

######################
#    vshtrafo 1.0    #
######################

# This wrapper script is auto-generated by viash 0.4.0 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
VIASH_EXEC_MODE="run"

function ViashSetup {
:
}


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
   echo "Transform viash formats."
   echo
   echo "Options:"
    echo "    -i file, --input=file"
    echo "        type: file, required parameter"
    echo "        Input file"
    echo ""
    echo "    -o file, --output_dir=file"
    echo "        type: file, required parameter"
    echo "        Output directory"
    echo ""
    echo "    -f string, --format=string"
    echo "        type: string, required parameter"
    echo "        Output format. Must be one of 'script', 'config'"
    echo ""
    echo "    --rm"
    echo "        type: boolean_true"
    echo "        Remove the source files after use."
    echo ""
}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit;;
        ---setup)
            VIASH_EXEC_MODE="setup"
            shift 1
            ;;
        ---push)
            VIASH_EXEC_MODE="push"
            shift 1
            ;;
        --input)
            VIASH_PAR_INPUT="$2"
            shift 2
            ;;
        --input=*)
            VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -i)
            VIASH_PAR_INPUT="$2"
            shift 2
            ;;
        --output_dir)
            VIASH_PAR_OUTPUT_DIR="$2"
            shift 2
            ;;
        --output_dir=*)
            VIASH_PAR_OUTPUT_DIR=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -o)
            VIASH_PAR_OUTPUT_DIR="$2"
            shift 2
            ;;
        --format)
            VIASH_PAR_FORMAT="$2"
            shift 2
            ;;
        --format=*)
            VIASH_PAR_FORMAT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -f)
            VIASH_PAR_FORMAT="$2"
            shift 2
            ;;
        --rm)
            VIASH_PAR_RM=true
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

if [ "$VIASH_EXEC_MODE" == "setup" ]; then
  ViashSetup
  exit 0
fi

if [ "$VIASH_EXEC_MODE" == "push" ]; then
  ViashPush
  exit 0
fi

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT" ]; then
  echo '--input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_DIR" ]; then
  echo '--output_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_FORMAT" ]; then
  echo '--format' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_RM" ]; then
  VIASH_PAR_RM="false"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-vshtrafo-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
# The following code has been auto-generated by Viash.
par_input='$VIASH_PAR_INPUT'
par_output_dir='$VIASH_PAR_OUTPUT_DIR'
par_format='$VIASH_PAR_FORMAT'
par_rm='$VIASH_PAR_RM'

resources_dir="$VIASH_RESOURCES_DIR"


set -e

# detect input type
input_dir=\$(dirname \$par_input)
if [[ "\$par_input" =~ ^.*\\.vsh\\.(sh|r|R|py)\$ ]]; then
  input_type=script
  input_ext=\`echo "\$par_input" | sed 's#.*\\.##'\`
  
  if [ "\$input_ext" = "sh" ]; then
    script_type="bash"
  elif [[ \$input_ext =~ ^[rR]\$ ]]; then
    script_type="r"
  elif [ "\$input_ext" = "py" ]; then
    script_type="python"
  else
    echo "Unsupported format: \$input_ext!"
    exit 1
  fi
elif [[ "\$par_input" =~ ^.*\\.vsh\\.(yaml|yml)\$ ]]; then
  input_type=config
else
  echo Input: unsupported format.
  exit 1
fi

# create dir if it does not exist
[[ -d "\$par_output_dir" ]] || mkdir -p "\$par_output_dir"

# check format
if [[ ! \$par_format =~ ^(script|config)\$ ]]; then
  echo "Output: unsupported format. Must be one of 'script' or 'config'"
  exit 1
fi

# ------------------------ X -> X ------------------------
if [ \$input_type = \$par_format ]; then 
  echo Input type is equal to output type. 
  echo Just use cp, you son of a silly person.
  cp "\$par_input" "\$par_output_dir/\$(basename \$par_input)"

# ------------------------ SCRIPT -> CONFIG ------------------------
elif [ \$input_type = "script" ] && [ \$par_format = "config" ]; then
  echo "Converting from 'script' to 'config'"

  # determine output paths
  config_yaml_relative="config.vsh.yaml"
  config_yaml_path="\$par_output_dir/\$config_yaml_relative"
  output_script_relative="\$(basename \$par_input | sed 's#\\.vsh\\.#.#')"
  output_script_path="\$par_output_dir/\$output_script_relative"
  
  # WRITING CONFIG YAML
  echo "> Writing config yaml to \$config_yaml_relative"
  CONFIG_YAML=\$(cat "\$par_input" | grep "^#' " | sed "s/^#' //")
  
  # write yaml without resources
  echo "\$CONFIG_YAML" | yq d - functionality.resources > "\$config_yaml_path"
  
  # add script to resources
  printf "functionality:\\n  resources:\\n  - type: \${script_type}_script\\n    path: \$output_script_relative\\n" | yq m "\$config_yaml_path" - -i
  
  # add other resources
  has_resources=\`echo "\$CONFIG_YAML" | yq read - functionality.resources | head -1\`
  if [ ! -z "\$has_resources" ]; then
    echo "\$CONFIG_YAML" | yq read - functionality.resources | yq p - functionality.resources | yq m -a append "\$config_yaml_path" - -i
  fi

  # WRITING SCRIPT
  echo "> Writing script to \$output_script_relative"
  cat "\$par_input" | grep -v "^#' " > "\$output_script_path"
  

# ------------------------ CONFIG -> SCRIPT ------------------------
elif [ \$input_type = "config" ] && [ \$par_format = "script" ]; then
  echo "Converting from 'config' to 'script'"

  # determine output paths
  input_script_relative=\$(yq read "\$par_input" 'functionality.resources.[0].path')
  input_script_path="\$input_dir/\$input_script_relative"
  output_script_relative=\$(echo "\$input_script_relative" | sed 's#\\(\\.[^\\.]*\\)#.vsh\\1#')
  output_script_path="\$par_output_dir/\$output_script_relative"
  
  # writing header
  echo "> Writing script with header to \$output_script_relative"
  yq delete "\$par_input" 'functionality.resources.[0]' | sed "s/^/#' /" > "\$output_script_path"
  
  # writing script
  awk "/VIASH START/,/VIASH END/ { next; }; 1 {print; }" "\$input_script_path" >> "\$output_script_path"
  awk "/VIASH START/,/VIASH END/ { next; }; 1 {print; }" "\$input_script_path" >> "\$output_script_path"

# ------------------------ CONFIG -> SPLIT ------------------------
elif [ \$input_type = "config" ] && [ \$par_format = "split" ]; then
  echo "Converting from 'config' to 'split'"

  # determine output paths
  funcionality_yaml_relative="functionality.yaml"
  funcionality_yaml_path="\$par_output_dir/\$funcionality_yaml_relative"
  
  # WRITING FUNCTIONALITY YAML
  echo "> Writing functionality yaml to \$funcionality_yaml_relative"
  yq r "\$par_input" functionality > "\$funcionality_yaml_path"
  
  #### PLATFORM(S)
  # create platform yamls
  platforms=\$(yq read "\$par_input" platforms.*.type)
  for plat in \$platforms; do
    platform_yaml_relative="platform_\${plat}.yaml"
    platform_yaml_path="\$par_output_dir/\$platform_yaml_relative"
    echo "> Writing platform yaml to \$platform_yaml_relative"
    yq read "\$par_input" platforms.[type==\$plat] > "\$platform_yaml_path"
  done
  
  # copy script
  input_script_relative=\$(yq read "\$par_input" 'functionality.resources.[0].path')
  input_script_path="\$input_dir/\$input_script_relative"
  output_script_path="\$par_output_dir/\$input_script_relative"
  
  if [ "\$input_script_path" != "\$output_script_path" ]; then
    cp "\$input_script_path" "\$output_script_path"
  fi

fi
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

bash "\$tempscript"

VIASHEOF
