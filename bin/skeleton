#!/usr/bin/env bash

######################
#    skeleton 0.1    #
######################

# This wrapper script is auto-generated by viash 0.4.0 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
VIASH_EXEC_MODE="run"

function ViashSetup {
:
}


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
   echo "Create a skeleton src component"
   echo
   echo "Options:"
    echo "    -n string, --name=string"
    echo "        type: string, required parameter"
    echo "        Name of the component"
    echo ""
    echo "    -ns string, --namespace=string"
    echo "        type: string"
    echo "        Namespace of the component"
    echo ""
    echo "    -l string, --language=string"
    echo "        type: string, default: bash"
    echo "        Which scripting language to use. Possible values are 'bash', 'r', and 'python'."
    echo ""
    echo "    -p string1,string2,..., --platform=string1,string2,..."
    echo "        type: string, multiple values allowed, default: docker,native,nextflow"
    echo "        Which platforms to add. Possible values are 'native', 'docker', 'nextflow'. By default, all three will be added."
    echo ""
    echo "    --src=file"
    echo "        type: file, default: src"
    echo "        Target directory if different from src/"
    echo ""
}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit;;
        ---setup)
            VIASH_EXEC_MODE="setup"
            shift 1
            ;;
        ---push)
            VIASH_EXEC_MODE="push"
            shift 1
            ;;
        --name)
            VIASH_PAR_NAME="$2"
            shift 2
            ;;
        --name=*)
            VIASH_PAR_NAME=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -n)
            VIASH_PAR_NAME="$2"
            shift 2
            ;;
        --namespace)
            VIASH_PAR_NAMESPACE="$2"
            shift 2
            ;;
        --namespace=*)
            VIASH_PAR_NAMESPACE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -ns)
            VIASH_PAR_NAMESPACE="$2"
            shift 2
            ;;
        --language)
            VIASH_PAR_LANGUAGE="$2"
            shift 2
            ;;
        --language=*)
            VIASH_PAR_LANGUAGE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -l)
            VIASH_PAR_LANGUAGE="$2"
            shift 2
            ;;
        --platform)
            if [ -z "$VIASH_PAR_PLATFORM" ]; then
              VIASH_PAR_PLATFORM="$2"
            else
              VIASH_PAR_PLATFORM="$VIASH_PAR_PLATFORM,""$2"
            fi
            shift 2
            ;;
        --platform=*)
            if [ -z "$VIASH_PAR_PLATFORM" ]; then
              VIASH_PAR_PLATFORM=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_PLATFORM="$VIASH_PAR_PLATFORM,"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        -p)
            if [ -z "$VIASH_PAR_PLATFORM" ]; then
              VIASH_PAR_PLATFORM="$2"
            else
              VIASH_PAR_PLATFORM="$VIASH_PAR_PLATFORM,""$2"
            fi
            shift 2
            ;;
        --src)
            VIASH_PAR_SRC="$2"
            shift 2
            ;;
        --src=*)
            VIASH_PAR_SRC=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

if [ "$VIASH_EXEC_MODE" == "setup" ]; then
  ViashSetup
  exit 0
fi

if [ "$VIASH_EXEC_MODE" == "push" ]; then
  ViashPush
  exit 0
fi

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_NAME" ]; then
  echo '--name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_LANGUAGE" ]; then
  VIASH_PAR_LANGUAGE="bash"
fi
if [ -z "$VIASH_PAR_PLATFORM" ]; then
  VIASH_PAR_PLATFORM="docker,native,nextflow"
fi
if [ -z "$VIASH_PAR_SRC" ]; then
  VIASH_PAR_SRC="src"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-skeleton-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
# The following code has been auto-generated by Viash.
par_name='$VIASH_PAR_NAME'
par_namespace='$VIASH_PAR_NAMESPACE'
par_language='$VIASH_PAR_LANGUAGE'
par_platform='$VIASH_PAR_PLATFORM'
par_src='$VIASH_PAR_SRC'

resources_dir="$VIASH_RESOURCES_DIR"

#!/bin/bash


# check par_language
if [[ \$par_language =~ ^bash|sh|Bash\$ ]]; then
  script_lang=bash
elif [[ \$par_language =~ ^r|R\$ ]]; then
  script_lang=r
elif [[ \$par_language =~ ^py|python|Python\$ ]]; then
  script_lang=python
else 
  echo "Unrecognised language: \$par_language; please specify one of 'python', 'r', or 'bash'"
  exit 1
fi

# create output dir
out_dir="\$par_src/\$par_namespace/\$par_name"
mkdir -p "\$out_dir"

##################################################################################
###                                FUNCTIONALITY                               ###
##################################################################################

# write header
cat > "\$out_dir/config.vsh.yaml" << HERE
functionality:
  name: "\$par_name"
HERE

# write namespace, if need be
if [ ! -z "\$par_namespace" ]; then
cat >> "\$out_dir/config.vsh.yaml" << HERE
  namespace: "\$par_namespace"
HERE
fi

# write more metadata and initial arguments
cat >> "\$out_dir/config.vsh.yaml" << HERE
  version: 0.0.1
  description: |
    Replace this with a (multiline) description of your component.
  arguments:
    - name: "--input"
      alternatives: [ "-i" ]
      type: file
      required: true
      description: Describe the input file.
    - name: "--output"
      alternatives: [ "-o" ]
      type: file
      direction: output
      required: true
      description: Describe the output file.
    - name: "--option"
      type: string
      description: Describe an optional parameter.
      default: "default-"
HERE

##################################################################################
###                                 BASH SCRIPTS                               ###
##################################################################################
if [ \$script_lang == "bash" ]; then
cat >> "\$out_dir/config.vsh.yaml" << HERE
  resources:
    - type: bash_script
      path: script.sh
  tests:
    - type: bash_script
      path: test.sh
HERE

cat >> "\$out_dir/script.sh" << 'HERE'
#!/bin/bash

echo "This is a skeleton component"
echo "The arguments are:"
echo " - input:  \$par_input"
echo " - output: \$par_output"
echo " - option: \$par_option"
echo

echo "Writing output file"
cat "\$par_input" | sed "s#.*#\$par_option-&#" > "\$par_output"
HERE

cat >> "\$out_dir/test.sh" << MAJORHERE
#!/bin/bash

set -ex

echo ">>> Creating dummy input file"
cat > input.txt << HERE
one
two
three
HERE

echo ">>> Running executable"
./\$par_name --input input.txt --output output.txt --option FOO

echo ">>> Checking whether output file exists"
[[ ! -f output.txt ]] && echo "Output file could not be found!" && exit 1

# create expected output file
cat > expected_output.txt << HERE
FOO-one
FOO-two
FOO-three
HERE

echo ">>> Checking whether content matches expected content"
diff output.txt expected_output.txt
[ \\\$? -ne 0 ] && echo "Output file did not equal expected output" && exit 1

# print final message
echo ">>> Test finished successfully"

# do not remove this
# as otherwise your test might exit with a different exit code
exit 0
MAJORHERE

##################################################################################
###                                 RLANG SCRIPTS                              ###
##################################################################################
elif [ \$script_lang == "r" ]; then
cat >> "\$out_dir/config.vsh.yaml" << HERE
  resources:
    - type: r_script
      path: script.R
  tests:
    - type: r_script
      path: test.R
HERE
cat >> "\$out_dir/script.R" << 'HERE'
cat("This is a skeleton component\\n")
cat("The arguments are:\\n")
cat(" - input: ", par\$input, "\\n", sep = "")
cat(" - output: ", par\$output, "\\n", sep = "")
cat(" - option: ", par\$option, "\\n", sep = "")
cat("\\n")

cat("Reading input file\\n")
lines <- readLines(par\$input)

cat("Running output algorithm\\n")
new_lines <- paste0(par\$option, "-", lines)

cat("Writing output file\\n")
writeLines(new_lines, con = par\$output)
HERE

cat >> "\$out_dir/test.R" << HERE
library(testthat)

# create dummy input file
old_lines <- c("one", "two", "three")
writeLines(old_lines, "input.txt")

# run executable
system("./\$par_name --input input.txt --output output.txt --option FOO")

# check whether output file exists
expect_true(file.exists("output.txt"))

# check whether content matches expected content
expected_lines <- c("FOO-one", "FOO-two", "FOO-three")
new_lines <- readLines("output.txt")
expect_equal(new_lines, expected_lines)

cat(">>> Test finished successfully!")
HERE

##################################################################################
###                                PYTHON SCRIPTS                              ###
##################################################################################
elif [ \$script_lang == "python" ]; then
cat >> "\$out_dir/config.vsh.yaml" << HERE
  resources:
    - type: python_script
      path: script.py
  tests:
    - type: python_script
      path: test.py
HERE

cat >> "\$out_dir/script.py" << 'HERE'
print("This is a skeleton component")
print("The arguments are:")
print(" - input: ", par["input"])
print(" - output: ", par["output"])
print(" - option: ", par["option"])
print("")


with open(par["input"], "r") as reader, open(par["output"], "w") as writer:
    lines = reader.readlines()
    
    new_lines = [par["option"] + x for x in lines]
    
    writer.writelines(new_lines)
HERE

cat >> "\$out_dir/test.py" << HERE
import unittest
import os
from os import path
import subprocess


with open("input.txt", "w") as writer:
    writer.writelines(["one\\n", "two\\n", "three\\n"])


class MyTest(unittest.TestCase):
    def test_component(self):
        out = subprocess.check_output(["./\$par_name", "--input", "input.txt", "--output", "output.txt", "--option", "FOO-"]).decode("utf-8")

        self.assertTrue(path.exists("output.txt"))
        
        with open("output.txt", "r") as reader:
            lines = reader.readlines()
        
        self.assertEqual(lines, ["FOO-one\\n", "FOO-two\\n", "FOO-three\\n"])
    
        
unittest.main()
HERE

fi

##################################################################################
###                                  PLATFORMS                                 ###
##################################################################################
# write platforms
cat >> "\$out_dir/config.vsh.yaml" << HERE
platforms:
HERE

# iterate over different specified platforms
IFS=','
set -f
for platform in \$par_platform; do
  unset IFS
  if [ \$platform == "docker" ]; then
  
    # choose different default docker image based on language
    if [ \$script_lang == "bash" ]; then
    cat >> "\$out_dir/config.vsh.yaml" << HERE
  - type: docker
    image: ubuntu:20.04
    setup:
      - type: apt
        packages: 
          - bash
HERE

    elif [ \$script_lang == "r" ]; then
    cat >> "\$out_dir/config.vsh.yaml" << HERE
  - type: docker
    image: rocker/tidyverse:4.0.4
    setup:
      - type: r
        packages: 
          - princurve
HERE

    elif [ \$script_lang == "python" ]; then
    cat >> "\$out_dir/config.vsh.yaml" << HERE
  - type: docker
    image: python:3.9.3-buster
    setup:
      - type: python
        packages: 
          - numpy
HERE
    fi
  
  elif [ \$platform == "native" ]; then
    cat >> "\$out_dir/config.vsh.yaml" << HERE
  - type: native
HERE
  
  elif [ \$platform == "nextflow" ]; then
    cat >> "\$out_dir/config.vsh.yaml" << HERE
  - type: nextflow
HERE

  fi
done
set +f



  
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

bash "\$tempscript"

VIASHEOF
