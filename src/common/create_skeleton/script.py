from ruamel.yaml import YAML
from pathlib import Path


## VIASH START
# The following code has been auto-generated by Viash.
par = {
  'src': './src',
  'task': 'denoising',
  'comp_type': 'metric',
  'language': 'python',
  'name': 'new_comp',
}
meta = {
}

## VIASH END


def add_metric_config(tmpl):
  
  tmpl['functionality']['info']['metrics'] = [{
      'metric_id': 'metric_id',
      'metric_name': 'Metric Name',
      'metric_description': 'metric description',
      'min': 0,
      'max': 1,
      'maximize': 'true',
    }]
  
  return tmpl

def add_method_config(tmpl):

  tmpl['functionality']['info'].update({
    'method_name': 'Method name',
    'preferred_normalization': '',
    'variants': {
      par['name']: '',
      'method_variant1': {
        'preferred_normalization': ''
      }
    }
  })

  return tmpl

def add_python_setup(conf):

  conf['functionality']['resources'][0]['type'] = 'python_script'
  conf['functionality']['resources'][0]['path'] = 'script.py'

  conf['functionality']['test_resources'][0]['type'] = 'python_script'
  conf['functionality']['test_resources'][0]['path'] = 'script.py'

  for i, platform in enumerate(conf['platforms']):
    if platform['type'] == 'docker':
      conf['platforms'][i]['image'] = 'python:3.10'

  return conf

def add_r_setup(conf):

  conf['functionality']['resources'][0]['type'] = 'r_script'
  conf['functionality']['resources'][0]['path'] = 'script.R'

  conf['functionality']['test_resources'][0]['type'] = 'r_script'
  conf['functionality']['test_resources'][0]['path'] = 'script.R'

  for i, platform in enumerate(conf['platforms']):
    if platform['type'] == 'docker':
      pltf = conf['platforms'][i]
      pltf['image'] = 'eddelbuettel/r2u:22.04'
      pltf['setup'].append(
        {
          'type': 'r',
          'cran': [ 'anndata'],
          'bioc': ''
        },
        {
          'type': 'apt',
          'packages': ['libhdf5-dev', 'libgeos-dev', 'python3', 'python3-pip', 'python3-dev', 'python-is-python3']
        }
      )

  return conf


def create_python_script(tmpl_par):
  script_templ = f'''import anndata as ad
## VIASH START

par = {templ_par}

meta = {{
  'functionality_name': 'foo'
}}

## VIASH END

print('Load input data', flush=True)
adata=ad.read_h5ad(par['{list(templ_par.keys())[0]}'])

print('Process data', flush=True)
# insert code block here where pred is the prediction

pred = adata

# Create output anndata
output = ad.AnnData(
  uns = {{
    'dataset_id': adata.uns['dataset_id'],
    'method_id': meta['functionality_name']
  }},
  layers = adata.layers
)

output.layers['denoised'] = pred

print('Write Data', flush=True)
output.write_h5ad(par['output'],compression='gzip')
'''

  return script_templ

def create_r_script(tmpl_par):
  ''


## Create config file
if 'control' in par['comp_type']:
  merge = 'control_method'
else:
  merge = par['comp_type']

config_tmpl = f'''
# points to global config e.g. parameters
__merge__: ../../api/comp_{merge}.yaml
functionality:
  name: {par['name']}
  namespace: {par["task"]}/{merge}s 
  description: # add description
  info: 
    type: {par["comp_type"]}

  # additional parameters specific for method. always set default if required
  parameters:

  # files your script needs
  resources:
    - type: 
      path:

  # resources for unit testing your component
  test_resources:
    - type: python_script
      path: test.py
    - path: sample_data

# target platforms
platforms:
  - type: docker
    image:
    setup:
      - type: python
        pip:
          - pyyaml
          - anndata>=0.8
  - type: nextflow
    directives:
      label: ['midmem', 'midcpu']
'''

yaml = YAML()
conf_tmpl_dict = yaml.load(config_tmpl)

# Add component specific config data

if par['comp_type'] == 'metric':

  config_out = add_metric_config(conf_tmpl_dict)

else:
  
  config_out = add_method_config(conf_tmpl_dict)

  if par['comp_type'] == 'method':
    config_out['functionality']['info']['paper_reference']= ''


# add elements depending on language
if par['language'] == 'python':

  config_out = add_python_setup(config_out)

if par['language'] == 'r':

  config_out = add_r_setup(config_out)


## Create script template

resource_dir = par['src']

task_api = f'{resource_dir}/{par["task"]}/api'
api_conf = f'{task_api}/comp_{merge}.yaml'

with open(api_conf, 'r') as f:
  api_data = yaml.load(f)

args = api_data['functionality']['arguments']

templ_par = {}

for arg in args:
  templ_par[arg['name'].replace('--','')] = ''

if par['language'] == 'python':

  script_out = create_python_script(templ_par)

if par['language'] == 'r':

  script_out = create_r_script(templ_par)



## Write output
out_dir= Path(par["output"])

out_dir.mkdir(exist_ok=True)

with open(f'{out_dir}/config.vsh.yaml', 'w') as f:
  yaml.dump(config_out, f)

script_f = config_out['functionality']['resources'][0]['path']

with open(f'{out_dir}/{script_f}', 'w') as fpy:
  fpy.write(script_out)