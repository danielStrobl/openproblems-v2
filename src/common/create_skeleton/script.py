
import yaml


## VIASH START
# The following code has been auto-generated by Viash.
par = {
  'task': 'denoising',
  'comp_type': 'metric',
  'platform': 'python'
}
meta = {
}

## VIASH END




if 'control' in par['comp_type']:
  merge = 'control_method'
else:
  merge = par['comp_type']

skeleton_config = {
  '__merge__' : f'../../api/comp_{merge}.yaml',
  'functionality': {
    'name' : 'new_method_name',
    'namespace': f'{par["task"]}/{merge}s',
    'description': 'Description what this component does',
    'info' : {
      'type': par['comp_type']
    },
    'resources': [
      {
        'type': '',
        'path': '',
      }
    ],
    'test_resources': [{
      'type': '',
      'path': ''
    }]
  },
  'platforms': [
      {
        'type' : 'nextflow',
        'directives': {
          'label': ['midmem', 'midcpu']
        }
      }
    ]
}

# Add component specific config data

if par['comp_type'] == 'metric':

  skeleton_config['functionality']['info']['metrics'] = [{
      'metric_id': 'metric_id',
      'metric_name': 'Metric Name',
      'metric_description': 'metric description',
      'min': 0,
      'max': 1,
      'maximize': 'true',
    }
    ]

else:
  method_info = {
    'method_name': 'Method name',
    'preferred_normalization': 'log_cpm',
    'variants': {
      'method_name': '',
      'method_variant1': {
        'preferred_normalization': 'sqrt_cpm'
      }
    }
  }
  if par['comp_type'] == 'method':
    method_info['paper_reference']= ''

  skeleton_config['functionality']['info'].update(method_info)

# add elements depending on platform
if par['platform'] == 'python':

  script_outf = 'script.py'

  skeleton_config['functionality']['resources'][0]['type'] = 'python_script'
  skeleton_config['functionality']['resources'][0]['path'] = script_outf

  skeleton_config['functionality']['test_resources'][0]['type'] = 'python_script'
  skeleton_config['functionality']['test_resources'][0]['path'] = script_outf

  skeleton_config['platforms'].append({
    'type': 'docker',
    'image': 'python:3.10',
    'setup': [{
      'type': 'python',
      'pip': [
        "anndata>=0.8",
        "pyyaml"
      ]
    }]
  })





# Create python template
task_api = f'/src/{par["task"]}/api'
api_conf = f'{task_api}/comp_{merge}.yaml'

with open(api_conf, 'r') as f:
  api_data = yaml.safe_load(f)

args = api_data['arguments']

templ_par = {}

for arg in args:
  templ_par[arg.replace('--','')] = ''

script_templ = f'''
  

'''


# Write output
with open('config.vsh.yaml', 'w') as f:
  yaml.safe_dump(skeleton_config, f, sort_keys=False)