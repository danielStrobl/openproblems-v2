#!/usr/bin/env bash

# preprocess dev
# 
# This wrapper script is auto-generated by viash 0.5.12 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.
# 
# Component authors:
#  * Scott Gigante (author) {github: scottgigante}
#  * Vinicius Saraiva Chagas (maintainer) {github: chagasVinicius}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug $@
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# backwards compatibility
VIASH_RESOURCES_DIR="$VIASH_META_RESOURCES_DIR"

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="preprocess"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "preprocess dev"
  echo ""
  echo "Common component to preprocess pancreas data"
  echo ""
  echo "Options:"
  echo "    --input"
  echo "        type: file, required parameter"
  echo "        Input data to be preprocessed"
  echo ""
  echo "    --test"
  echo "        type: boolean"
  echo "        default: false"
  echo "        Indicates if should be returned a test preprocessed data"
  echo ""
  echo "    --method"
  echo "        type: string"
  echo "        default: batch"
  echo "        choices:"
  echo "            - batch"
  echo "            - random"
  echo "            - random_with_noise"
  echo "        The preprocess method to be used. Options: ['batch', 'random',"
  echo "'random_with_noise']"
  echo ""
  echo "    -o, --output"
  echo "        type: file, required parameter, output"
  echo "        default: output.h5ad"
  echo "        Output h5ad file preprocessed"
}

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "preprocess dev"
            exit
            ;;
        --input)
            VIASH_PAR_INPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --input. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --input=*)
            VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --test)
            VIASH_PAR_TEST="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --test. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --test=*)
            VIASH_PAR_TEST=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --method)
            VIASH_PAR_METHOD="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --method. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --method=*)
            VIASH_PAR_METHOD=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -o)
            VIASH_PAR_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -o. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS




# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT" ]; then
  ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_TEST" ]; then
  VIASH_PAR_TEST="false"
fi
if [ -z "$VIASH_PAR_METHOD" ]; then
  VIASH_PAR_METHOD="batch"
fi


# check whether parameters values are of the right type

if [[ -n "$VIASH_PAR_TEST" ]]; then
  if ! [[ "$VIASH_PAR_TEST" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--test' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi




# check whether parameters values are of the right type


if [ ! -z "$VIASH_PAR_METHOD" ]; then
  VIASH_PAR_METHOD_CHOICES=("batch:random:random_with_noise")
  IFS=:
  set -f
  if ! [[ ":${VIASH_PAR_METHOD_CHOICES[*]}:" =~ ":$VIASH_PAR_METHOD:" ]]; then
    ViashError '--method' specified value of \'$VIASH_PAR_METHOD\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi



cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-preprocess-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
## VIASH START
# The following code has been auto-generated by Viash.
par = {
  'input': $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "'${VIASH_PAR_INPUT//\'/\\\'}'"; else echo None; fi ),
  'test': $( if [ ! -z ${VIASH_PAR_TEST+x} ]; then echo "'${VIASH_PAR_TEST//\'/\\\'}'.lower() == 'true'"; else echo None; fi ),
  'method': $( if [ ! -z ${VIASH_PAR_METHOD+x} ]; then echo "'${VIASH_PAR_METHOD//\'/\\\'}'"; else echo None; fi ),
  'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'${VIASH_PAR_OUTPUT//\'/\\\'}'"; else echo None; fi )
}
meta = {
  'functionality_name': '$VIASH_META_FUNCTIONALITY_NAME',
  'resources_dir': '$VIASH_META_RESOURCES_DIR',
  'temp_dir': '$VIASH_TEMP'
}

resources_dir = '$VIASH_META_RESOURCES_DIR'

## VIASH END
import noise
import preprocess
import numpy as np
import scanpy as sc


def batch(adata):
    adata.obs["labels"] = adata.obs["celltype"]
    adata.obs["batch"] = adata.obs["tech"]

    # Assign training/test
    test_batches = adata.obs["batch"].dtype.categories[[-3, -1]]
    adata.obs["is_train"] = [
        False if adata.obs["batch"][idx] in test_batches else True
        for idx in adata.obs_names
    ]
    return adata


def random(adata):
    adata.obs["labels"] = adata.obs["celltype"]
    adata.obs["batch"] = adata.obs["tech"]

    # Assign training/test
    adata.obs["is_train"] = np.random.choice(
        [True, False], adata.shape[0], replace=True, p=[0.8, 0.2]
    )

    return adata


def random_with_noise(adata):
    adata.obs["labels"] = adata.obs["celltype"]
    adata.obs["batch"] = adata.obs["tech"]

    # Assign trainin/test
    adata.obs["is_train"] = np.random.choice(
        [True, False], adata.shape[0], replace=True, p=[0.8, 0.2]
    )

    # Inject label noise
    adata = noise.add_label_noise(adata, noise_prob=0.2)

    return adata


func_map = {'batch': batch,
            'random': random,
            'random_with_noise': random_with_noise}

method_func = func_map[par['method']]
adata = sc.read(par['input'])

if par['test']:
    adata = adata[:, :500].copy()
    preprocess.filter_genes_cells(adata)
    keep_celltypes = adata.obs["celltype"].dtype.categories[[0, 3]]
    keep_techs = adata.obs["tech"].dtype.categories[[0, -3, -2]]
    keep_tech_idx = adata.obs["tech"].isin(keep_techs)
    keep_celltype_idx = adata.obs["celltype"].isin(keep_celltypes)
    adata = adata[keep_tech_idx & keep_celltype_idx].copy()
    sc.pp.subsample(adata, n_obs=500)
    # Note: could also use 200-500 HVGs rather than 200 random genes
    # Ensure there are no cells or genes with 0 counts
    preprocess.filter_genes_cells(adata)
else:
    preprocess.filter_genes_cells(adata)


preprocessed_adata = method_func(adata)
preprocessed_adata.write(par['output'])
VIASHMAIN
python "\$tempscript" &
wait "\$!"

VIASHEOF
